#!/usr/bin/env python3
import sys
import getopt
import os

lib_path = os.getcwd() + "/../lib/backend"
sys.path.append( lib_path )
from util import Log 

#generiert ein Manifest f√ºr Compontent
opt = "n:c:i:vh:p:u:"
long_opt = ["name=", 
        "ci=", 
        "impl=", 
        "documentation=", 
        "verbose", 
        "version", 
        "hostname=",
        "port=",
        "user="]
max_output_level = 2

def usage():
    print("Usage:", sys.argv[0], """[ -n | --name=name ]
         \t [ -c | --ci=interface ]
         \t [ -i | --impl=component ]
         \t [ --doc=documentation ]
         \t [ -h | --hostname=example.org ]
         \t [ -p | --port=22 ]
         \t [ -u | --user=foo ]
         \t [-v | --verbose]
         \t [--version]  """)

def hash_file():
    return ""

def main():
    import datetime
    Log.setHandler = Log.handlerActivation(Log.setHandler)
    try:
         opts, args = getopt.getopt(sys.argv[1:], opt, long_opt)
    except getopt.GetoptError as err:
        usage()
        sys.exit(2)
    output = None
    verbose = 0
    # package variables
    name = "" # will be set later
    import subprocess
    host = subprocess.check_output(["hostname", "--fqdn"])
    user = subprocess.check_output(["whoami"])
    ssh_port = 22
    exe_path = "" #  will be set during argument parsing
    exe_hash = "" # I'll explain later (The Doctor)
    ci_name = "" # will be set during argument parsing

    for o, a in opts:
        if o in ("-n", "--name"):
            name = a
            Log.debug("setting name")
        elif o in ("-c", "--ci"):
            try:
                with open(a, "r"):
                    pass
            except IOError:
                Log.critical("File %s doesn't exists."%a)
                exit(1)

            ci_name = a
            Log.debug("setting ci")
        elif o in ("-i", "--impl"):
            if os.path.isfile(a):
                exe_path = a
            else:
                Log.critical("File does not exists")
            Log.debug("setting implementation")
        elif o == "--doc":
            try:
                with open(a,"r") as f:
                    pass
            except IOError:
                Log.critical("File %s doesn't exists."%a)
                exit(1)
            Log.debug("setting documentation")
        elif o in ("-h", "--hostname"):
            host = a
            Log.debug("setting manually given hostname")
        elif o in ("-p", "--port"):
            port = a
            Log.debug("setting manually given port")
        elif o in ("-v", "--verbose"):
            Log.increase_verbosity()
        elif o == "version":
            usage()
    # Hostname check
    if host == "localhost" or host == None:
        Log.critical("No external hostname found. Try -h option?")
        exit(1)
    # Port/Hostname check
    import socket
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, ssh_port))
        s.shutdown(2)
    except socket.error:
        Log.critical("Connection refused. SSH running? Try maybe -p?")
        exit(1)
    exe_hash = hash_file(exe)
    

if __name__ == "__main__":
    main()            
