#!/usr/bin/env python3
import sys
import getopt
import os

from util import Log
from util.util import hash_file

# generiert ein Manifest f√ºr Compontent
opt = "n:c:i:vh:p:u:"
# name of the manifest-file
long_opt = ["name="]
# the used ci-interface
long_opt.append("ci=")
# the implemented component
long_opt.append("impl=")
# name of the generated document
long_opt.append("documentation=")
# increases/decreases the talkativeness
long_opt.append("verbose")
# shows version of the command
long_opt.append("version")
# gives the command a hostname manually
long_opt.append("hostname=")
# gives the command a port manually
long_opt.append("port=")
# specifies the user
long_opt.append("user=")


def usage():
    print("Usage:", sys.argv[0], """[ -n | --name=name ]
         \t [ -c | --ci=interface ]
         \t [ -i | --impl=component ]
         \t [ --doc=documentation ]
         \t [ -h | --hostname=example.org ]
         \t [ -p | --port=22 ]
         \t [ -u | --user=foo ]
         \t [-v | --verbose]
         \t [--version]  """)


def generate_control(name, host, user, ssh_port,
                     exe_path, exe_hash, ci_name):
    """ Generates the config file of an ctl-package
    """
    from datetime import datetime
    filename = 'control-%s' % datetime.now().strftime('%s')
    with open(filename, 'w') as f:
        f.write('[DEFAULT]\n')
        f.write('name=%s\n' % name)
        f.write('host=%s\n' % host)
        f.write('user=%s\n' % user)
        f.write('ssh=%s\n' % ssh_port)
        f.write('exe=%s\n' % exe_path)
        f.write('exe_hash=%s\n' % exe_hash)
        f.write('ci=%s\n' % ci_name)
    return filename


def generate_package(name, control, doc, ci):
    """ Generates ctl-manifest-package
    """
    import tarfile
    from datetime import datetime
    tar_file = name + datetime.now().strftime('%s') + '.tgz'
    with tarfile.open(tar_file, 'w:gz') as package:
        package.add(control, arcname='control')
        if doc:
            package.add(doc)
        package.add(ci)
    return tar_file


def main():
    print('This programm is deprecated. Please switch to ctl-build-component')
    Log.streamoutput()
    try:
        opts, args = getopt.getopt(sys.argv[1:], opt, long_opt)
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    required = 0
    # package variables
    name = ""  # will be set later
    import subprocess
    host = subprocess.check_output(["hostname", "--fqdn"]).strip()
    user = subprocess.check_output(["whoami"]).strip().decode('utf8')
    doc = None
    ssh_port = 22
    exe_path = ""  # will be set during argument parsing
    exe_hash = ""  # I'll explain later (The Doctor)
    ci_name = ""  # will be set during argument parsing

    for o, a in opts:
        if o in ("-n", "--name"):
            required += 1
            name = a
            Log.debug("setting name")
        elif o in ("-c", "--ci"):
            required += 1
            try:
                with open(a, "r"):
                    pass
            except IOError:
                Log.critical("File %s doesn't exists." % a)
                exit(1)

            ci_name = a
            Log.debug("setting ci")
        elif o in ("-i", "--impl"):
            required += 1
            if os.path.isfile(a):
                exe_path = os.path.abspath(a)
            else:
                Log.critical("File does not exists")
            Log.debug("setting implementation")
        elif o == "--doc":
            try:
                with open(a, "r"):
                    pass
            except IOError:
                Log.critical("File %s doesn't exists." % a)
                exit(1)
            doc = a
            Log.debug("setting documentation")
        elif o in ("-h", "--hostname"):
            host = a
            Log.debug("setting manually given hostname")
        elif o in ("-p", "--port"):
            port = a
            Log.debug("setting manually given port")
        elif o in ("-v", "--verbose"):
            Log.increase_verbosity()
        elif o == "version":
            usage()
    if required != 3:
        Log.critical("Not all required options are given")
        usage()
        exit(1)
    # Hostname check
    Log.debug("Setting base informations")
    if host == "localhost" or host is None:
        Log.critical("No external hostname found. Try -h option?")
        exit(1)
    # Port/Hostname check
    import socket
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, ssh_port))
        s.shutdown(2)
    except socket.error:
        Log.critical("Connection refused. SSH running? Try maybe -p?")
        exit(1)
    exe_hash = hash_file(exe_path)
    # generate control file
    control = generate_control(name, host, user, ssh_port, exe_path,
                               exe_hash, ci_name)
    manifest_package = generate_package(name, control, doc, ci_name)
    os.remove(control)
    if not os.path.isfile(manifest_package):
        Log.critical("Some error during generation? Please report bug.")
        exit(2)
    exit(0)


if __name__ == "__main__":
    main()
