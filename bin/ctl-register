#!/usr/bin/env python3
import os
import sys
import getopt
from os.path import dirname,abspath
from util import Log
from util.util import overview
from database.database import Database
from database.user import User

# registriert benutzer mit id und rsa-pub-key.
# FÃ¼gt den Benutzer dabei der DB hinzu und schreibt die .authorized_keys neu

opt = "a:k:r:ov"
#adds a user to a cluster
long_opt = ["add="]
#the key which is saved with the user
long_opt.append("key=")
#removes a user from a cluster
long_opt.append("remove=")
#overview over all registered user
long_opt.append("overview")
#increases/decreases the talkativeness
long_opt.append("verbose")
#shows the version of the command
long_opt.append("version") 

max_output_level = 2

def usage():#
    print("Usage:", sys.argv[0], """[-a <id>|--add=<id> -k <key>|--key=<key>]
    \t [-r <id>|--remove=<id>] 
    \t [-o|--overview]
    \t [-v | --verbose]
    \t [--version]""")

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], opt, long_opt)

    except getopt.GetoptError as err:
        # Print help and exit
        print(err)
        usage()
        sys.exit(2)
    output = None
    database = None
    reg_id = "" #will be set during argument parsing
    pubkey = "" #will be set during argument parsing
    required = 0  #checks if all required arguments are give
    is_add = False
    is_remove = False
    is_overview = False

    #o = options, a = arguments
    for o, a in opts:
        if o in ("-c", "--config"):
            database = Database(a)
        elif o in ("-a", "--add"):
            is_add = True
            required += 1
            reg_id = a
        elif o in ("-r", "--remove"):
            remove_set = True
            Log.debug("Removing Entry with the specified ID")
            required += 1
            reg_id = a
        elif o in ("-o", "--overview"):
            overview_set = True
        elif o in ("-k", "--key"):
            required += 1
            pubkey = a
        elif o in ("-v", "--verbose"):
            Log.increase_verbosity()
        elif o == "version":
            usage()

    if (is_add and is_remove) or        \
        (is_remove and is_overview) or  \
        (is_add and is_overview):
            print("Please choose only one operation!")
            exit(1)
    if is_add and reg_id and pubkey:
        Log.debug("Switching to add context")
        Log.debug(reg_id+ "," +pubkey)
        User.add({
            "c_id": reg_id,
            "c_pubkey": pubkey,
            })
    elif is_remove and reg_id:
        Log.debug("Switching to remove context")
        to_remove = User.get_exacly(reg_id)
        to_remove.remove()
    elif is_overview: 
        Log.debug("Switching to overview context")
        overview(database)
    else:
        Log.debug("No option has been given, Aborting")
        exit(1)
        
if __name__ == "__main__":
    main()
