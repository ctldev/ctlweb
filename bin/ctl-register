#!/usr/bin/env python3
import sys
import getopt
from util import find_class
from util import add
from util import remove

# registriert benutzer mit id und rsa-pub-key.
# FÃ¼gt den Benutzer dabei der DB hinzu und schreibt die .authorized_keys neu

opt = "a:k:r:ov"
long_opt = [ "add=", "key=", "remove=", "overview", "verbose", "version" ]
max_output_level = 2

def usage():
    print("Usage:", sys.argv[0], """[-a <id>|--add=<id> -k <key>|--key=<key>]
    \t [-r <id>|--remove=<id>] 
    \t [-o|--overview]
    \t [-v | --verbose]
    \t [--version]""")

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], opt, long_opt)

    except getopt.GetoptError as err:
        # Print help and exit
        print(err)
        usage()
        sys.exit(2)
    output = None
    ss_port = 22
    reg_id = "" #will be set during argument parsing
    pubkey = "" #will be set during argument parsing
    required = 0  #checks if all required arguments are give
    remove_set = false

    #o = options, a = arguments
    for o, a in opts:
        if o in ("-a", "--add"):
            if a == "":
                Log.critical("No valid ID specified, Aborting")
                exit(1)
            else:

                required += 1
                reg_id = a
                Log.debug("Adding ID to cluster")
        elif o in ("-k", "--key"):
            if pubkey == "":
                Log.critical("No valid public key has been specified,
                        Aborting")
                exit(1)
            else:
                required += 1
                pubkey = a
                Log.debug("setting publickey")

        elif o in ("-r", "--remove"):
            remove_set = true
            print("removing",o,a)

        elif o in ("-o", "--overview"):
            overview_set = true
            print("overview",o,a)

        elif o in ("-v", "--verbose"):
            Log.increase_verbosity()
        elif o == "version":
            usage()

    if required == 2:
        Log.debug("Switching to add context")
        add(reg_id,pubkey,database)
    elif required != 2 and required != 0:
        Log.critical("Something went wrong with the ID or the Key")
        usage()
    elif required != 2 and remove_set
        Log.debug("Switching to remove context")
        remove(reg_id,pubkey,database)
    elif required != 2 and overview_set
        Log.debug("Switching to overview context")
        overview()
    else:
        Log.debug("No option giving, Aborting")
        pass
        
if __name__ == "__main__":
    main()
